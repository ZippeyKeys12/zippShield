version "3.2.4"

struct ZShieldDefaults{
	const MAX_HEALTH			=100;
	const RUN_HEALTH			=floor(MAX_HEALTH/4);
	const MAX_SHIELD			=MAX_HEALTH;
	const OVERSHIELD_FACTOR		=2;
	const SHIELD_DIVIDER		=MAX_SHIELD/5;
	const SHIELD_RECHARGE		=1;
	const SHIELD_RECHARGE_RATE	=5;
}

class Z_Lib_St{
	static void DebugStats(String str){
		if(z_debug_shield){
			console.printf(str);
		}
	}
}

class ZShield:DoomPlayer{
	int shield,
		maxShield,
		maxOvershield,
		shieldDivider,
		shieldRecharge,
		shieldRechargeRate;

	//Shield
	Property Shield: 				shield;
	Property MaxShield: 			maxShield, maxOvershield;
	Property ShieldDivider: 		shieldDivider;
	Property ShieldRecharge: 		shieldRecharge;
	Property ShieldRechargeRate: 	shieldRechargeRate;

	Default{
		//Health
		Health 						ZShieldDefaults.MAX_HEALTH;
		Player.MaxHealth 			ZShieldDefaults.MAX_HEALTH;
		Player.RunHealth 			ZShieldDefaults.RUN_HEALTH;
		ZShield.Shield 				ZShieldDefaults.MAX_SHIELD;
		ZShield.MaxShield 			ZShieldDefaults.MAX_SHIELD, ZShieldDefaults.MAX_SHIELD*ZShieldDefaults.OVERSHIELD_FACTOR;
		ZShield.ShieldDivider 		ZShieldDefaults.SHIELD_DIVIDER;
		ZShield.ShieldRecharge 		ZShieldDefaults.SHIELD_RECHARGE;
		ZShield.ShieldRechargeRate 	ZShieldDefaults.SHIELD_RECHARGE_RATE;
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags = 0, double angle = 0){
		damage=super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		Z_Lib_St.DebugStats("Health: "..health);
		Z_Lib_St.DebugStats("Shield: "..shield);
		return damage;
	}
	
	override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype){
		Z_Lib_St.DebugStats("OG Damage: "..damage);
		damage = super.TakeSpecialDamage(inflictor, source, damage, damagetype); //Get the damage amount from the OG TakeSpecialDamage function with 2* raw damage
		if(damage<=0){return 0;}
		if(damage<=shield){
			shield-=damage;
			return 0;
		}else{
			damage-=shield;
			shield=0;
		}
		return damage;
	}
}

class ZHandler_Recharger_S:EventHandler{
	int 	oldStats,
			newStats,
			shieldRecharger;

	ZShield activePlayer;
	
	override void OnRegister(){
		super.OnRegister();
		SetOrder(int('Shield'));
		shieldRecharger=0;
	}
	
	override void PlayerEntered(PlayerEvent e){
		activePlayer=ZShield(players[e.playernumber].mo);
	}
	
	override void WorldTick(){
		if(!activePlayer||activePlayer.health<=0)return;
		newStats=activePlayer.health
				+activePlayer.shield;
		if(oldStats==newStats && activePlayer.shield<activePlayer.maxShield
		   && (activePlayer.shield%activePlayer.shieldDivider!=0
		   || activePlayer.shield==0)){
			if(shieldRecharger>=activePlayer.shieldRechargeRate){
				activePlayer.shield+=activePlayer.shieldRecharge;
				shieldRecharger=0;
				Z_Lib_St.DebugStats("Shield: "..activePlayer.shield);
			}else{
				shieldRecharger++;
				Z_Lib_St.DebugStats("Shield Recharge: "..shieldRecharger);
			}
		}else
			shieldRecharger=0;
		oldStats=activePlayer.health
				+activePlayer.shield;
	}
}